Please README First!
====================
This is a collection of [Puppet](http://reductivelabs.com/trac/puppet/wiki/DocumentationStart) 0.24.8 configuration files for FreeBSD. I make heavy use of defaults and defines to heavily reduce code weight. Hopefully this will be of instructive value to new users of Puppet and inspirational value to old users.

I am definitely willing to add additional documentation as necessary. Just [email](mailto:eshao@nekogiri.com) me.


List of Modules
---------------
TODO: Add link to each module.

* __core__ -- System files for hypervisor and child jails.
* __environment/project__ -- Baseline programming environments for projects to inherit and examples of some of those projects.
* __exim/mailman__ -- Configuration for baseline exim/mailman install. Extensive documentation available on how to move from one server to another. Less, but still documented, on how to install.
* __ezjail__ -- Jail manager for FreeBSD. Really useful for setting up/tearing down jails quickly.
* __mount__ -- Very simple module to control jailed fstabs for ezjail.
* __nginx__ -- Complete configuration to nginx, one of my specialties. It includes a copy of [stationx](http://github.com/eshao/stationx), a configuration generation tool for nginx -- it makes managing nginx configuration files much easier!
* __mysql__ -- Simple mysql+[sphinx](http://www.sphinxsearch.com/) module.
* __ports__ -- Controls installation of all software not covered above. (Basically, every port that requires installation but not configuration.) Includes simple ruby script to help automate this process.
* __puppet__ -- Meta module that maintains Puppet's files. Essential for any Puppet setup.
* __ssh__ -- Managed per-machine ssh keys.
* __thttpd__ -- Configured specifically for nginx/mailman.
* __user__ -- Shows how to setup the virtual/real user model advocated on Puppet's wiki. The examples there aren't as full, so this should be helpful to new users.


Infrastructure
--------------
My infrastructure consists of one physical machine separated into several jails for permission AND ease-of-use purposes.

* __rescue__ -- Hypervisor machine and fileserver.
* __hyper__ -- Jail, hosts puppetmasterd.
* __neko__ -- Jail, personal sites.
* __dso__ -- Jail, for [DSO](http://dsoglobal.org), a student org I founded.
* __lp__ -- Jail, for experimental use.

It was important for me to be able to quickly tear down a jail and put it up again with a preset environment already installed. In general, this is how I do it:

1. Use [ezjail-admin](http://erdgeist.org/arts/software/ezjail/) to drop the jail.
2. Use Puppet (node.pp) to configure the environment of the new jail: which {users,ports,development environments,daemons/services,projects} are present/running.
3. Use ezjail again to bring up the new jail. The ezjail module makes sure that puppetd is already running on the new jail.
4. Login to the new jail and run Puppet to bring it fully online.

That is the main use case for my use of Puppet. Here are the secondary reasons:

* __[DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself) configuration files__ -- When I create a configuration file, I usually want to use it on all machines. I hate the process of making sure each copy of a file is identical.
* __Canonical location for files__ -- It was also nice to have one place to refer to for the "latest" copy of each file.
* __Canonical location for documentation__ -- For software I use often, I usually have some sort of "how-to-install" notes for myself. Puppet is a great place to keep and share such notes.
* There are probably others, I'll put them up as I think of them.


Code Samples
------------
TODO: Walk through a canonical module that demonstrates language constructs I use.
TODO: Walk through confusing modules here. (user, environment?) 
  
Would someone be kind enough to let me know which modules they find the most confusing or demonstrative/canonical of this repo?


Caveats
-------
These configuration files are all working and in production on my own server. However, because I redacted several files for privacy reasons (SSH id_rsa's, for example), I don't guarantee that the complete configuration will work out of the box for you.

However, I still think they'll be of instructive value for those who think/code like me. I searched quite a while for a complete/simple/comprehensive Puppet public repository and failed to find one. There are several [complete](http://reductivelabs.com/trac/puppet/wiki/DocumentationStart) ones, but were slightly confusing for me to follow along.

My suggestion for you is try all of them and pick the author you find most lucid.

- - -

Files changed for privacy concerns:

* __tagmail.conf__ -- redacted email addresses.
* __modules/puppet/templates/tagmail.conf.erb__ -- redacted email addresses.
* __modules/exim/templates/aliases.erb__ -- redacted email addresses.
* __modules/user/manifests/virtual.pp__ -- removed users and changed to bogus password hashes.
* __modules/user/manifests/real/dso.pp__ -- changed real users to bogus ones.
* __modules/user/manifests/real/neko.pp__ -- changed real users to bogus ones.

Files blanked to size 0 for privacy concerns:

* __modules/nginx/files/passwords/personal.htaccess__ -- obvious reason.

Files removed for privacy concerns:

* __modules/nginx/files/enabled/*__ -- (5 files) -- unnecessary, as can generate it using included stationx.
* __modules/ssh/files/*__ -- (15 files) -- files of format: ssh_host_{dsa,rsa,}_key.<hostname>


TODO
----
There is an embarassing amount TODO simply because I just open-sourced my modules. (Although the production version has been in development for a long time and represents years of experience.) Hints on how to prioritize would be nice. Again, hit up my email.

* Logic behind the various files in /manifests and how they interact.
* Document the use of defines and defaults within modules (through code samples?).
* Make this TODO list comprehensive.
